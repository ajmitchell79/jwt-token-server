<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <system.web></system.web>
  <system.webServer>
    <httpProtocol>
     
      <customHeaders>
        <add name="Access-Control-Allow-Headers" value="Origin, X-Requested-With, Content-Type, Accept" />
        <add name="Access-Control-Allow-Methods" value="POST,GET,OPTIONS,PUT,DELETE" />
        <add name="Access-Control-Allow-Credentials" value="true" />
      </customHeaders>
    </httpProtocol>
    <!-- URL Rewrite rule to allow the CORS Preflight request through -->
    <rewrite>
      <rules>
        <rule name="CORS Preflight Anonymous Authentication" stopProcessing="true">
          <match url=".*" />
          <conditions>
            <add input="{REQUEST_METHOD}" pattern="^OPTIONS$" />
          </conditions>
          <action type="CustomResponse" statusCode="200" statusReason="Preflight" statusDescription="Preflight" />
        </rule>
      </rules>
            <outboundRules>
              <!-- This allows "Access-Control-Allow-Origin" access to any domain. If you need to restrict domains to a list, look here
                https://stackoverflow.com/questions/17323350/access-control-allow-origin-with-multiple-domains/31084417#31084417 -->
                <rule name="AddCrossDomainHeader">
                    <match serverVariable="RESPONSE_Access_Control_Allow_Origin" pattern=".*" />
                    <conditions>
                        <add input="{HTTP_ORIGIN}" pattern=".*" />
                      <!--<add input="{HTTP_ORIGIN}" pattern="(http(s)?://((.+\.)?domain1\.com|(.+\.)?domain2\.com|(.+\.)?domain3\.com))" />-->
                    </conditions>
                    <action type="Rewrite" value="{C:0}" />
                </rule>
            </outboundRules>
    </rewrite>
    <validation validateIntegratedModeConfiguration="false" />
    <handlers>
      <add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModule" resourceType="Unspecified" />
    </handlers>
    <aspNetCore processPath="bin\IISSupport\VSIISExeLauncher.exe" forwardWindowsAuthToken="true" stdoutLogEnabled="false" stdoutLogFile=".\logs\stdout" arguments="-argFile IISExeLauncherArgs.txt">
     
      <!-- NOTE: either set this here to set the server environment, or set the ASPNETCORE_ENVIRONMENT environment variable on the server. The setting below overrides the environment variable -->
      <!-- This one might also be app-pool / website specific, so you could set this per website / app pool and host different environments on the same server  -->
      <!--<environmentVariables>
        <environmentVariable name="ASPNETCORE_ENVIRONMENT" value="Staging" />
      </environmentVariables>-->
    </aspNetCore>
    
  </system.webServer>
</configuration>